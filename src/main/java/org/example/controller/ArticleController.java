package org.example.controller;

import org.example.repository.ArticleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.example.model.Article;

import java.time.LocalDate;

@Controller // This means that this class is a Controller
@RequestMapping(path="/article") // This means URL's start with /demo (after Application path)
public class ArticleController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ArticleRepository articleRepository;

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Article> getAllArticles() {
        // This returns a JSON or XML with the users
        return articleRepository.findAll();
    }

    @GetMapping(path="/find")
    public @ResponseBody Article findArticleById(Integer id) {
        return articleRepository.findById(id).get();
    }

    @PostMapping(path="/add")
    public @ResponseBody String addNewArticle (@RequestParam String author, @RequestParam String content) {
        Article n = new Article();
        n.setAuthor(author);
        n.setContent(content);
        n.setDate(LocalDate.now());
        articleRepository.save(n);
        return "Saved";
    }

    @DeleteMapping(path="/delete")
    public @ResponseBody String deleteArticle(@RequestParam Integer id) {
        if (!articleRepository.existsById(id)) {
            return "Article not found";
        }
        articleRepository.deleteById(id);
        return "Deleted";
    }

    @PutMapping(path="/update")
    public @ResponseBody String updateArticle(@RequestParam Integer id, @RequestParam(required = false) String author, @RequestParam(required = false) String content) {
        if (!articleRepository.existsById(id)) {
            return "Article not found";
        }
        Article n = articleRepository.findById(id).get();

        n.setAuthor(author != null ? author : n.getAuthor());
        n.setContent(content != null ? content : n.getContent());
        articleRepository.save(n);
        return "Updated";
    }
}
