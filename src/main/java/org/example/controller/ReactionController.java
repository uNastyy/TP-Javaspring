package org.example.controller;

import org.example.model.Article;
import org.example.model.Reaction;
import org.example.model.User;
import org.example.repository.ArticleRepository;
import org.example.repository.ReactionRepository;
import org.example.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/reaction") // This means URL's start with /demo (after Application path)
public class ReactionController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ReactionRepository reactionRepository;

    @Autowired
    private ArticleRepository articleRepository;

    @Autowired
    private UserRepository userRepository;

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Reaction> getAllReactions() {
        // This returns a JSON or XML with the users
        return reactionRepository.findAll();
    }

    @GetMapping(path="/findByArticleId")
    public @ResponseBody Iterable<Reaction> findReactionByArticleId(Integer articleId) {
        return reactionRepository.findByArticleId(articleId);
    }

    @GetMapping(path="/findByUserId")
    public @ResponseBody Iterable<Reaction> findReactionByUserId(Integer userId) {
        return reactionRepository.findByUserId(userId);
    }

    @GetMapping(path="/numberOfDislikes")
    public @ResponseBody Integer numberOfDislikes(Integer articleId) {
        return reactionRepository.findByArticleId(articleId).stream().filter(reaction -> !reaction.getIsLike()).toArray().length;
    }

    @GetMapping(path="/numberOfLikes")
    public @ResponseBody Integer numberOfLikes(Integer articleId) {
        return reactionRepository.findByArticleId(articleId).stream().filter(reaction -> reaction.getIsLike()).toArray().length;
    }

    @PostMapping(path="/like")
    public @ResponseBody String like(Integer articleId, Integer userId) {
        if (!articleRepository.existsById(articleId)) {
            return "Article not found";
        }
        if (!userRepository.existsById(userId)) {
            return "User not found";
        }
        Article article = articleRepository.findById(articleId).get();
        User user = userRepository.findById(userId).get();
        Reaction reaction = new Reaction();
        reaction.setArticle(article);
        reaction.setUser(user);
        reaction.setIsLike(true);
        reactionRepository.save(reaction);
        return "Liked";
    }

    @PostMapping(path="/dislike")
    public @ResponseBody String dislike(Integer articleId, Integer userId) {
        if (!articleRepository.existsById(articleId)) {
            return "Article not found";
        }
        if (!userRepository.existsById(userId)) {
            return "User not found";
        }
        Article article = articleRepository.findById(articleId).get();
        User user = userRepository.findById(userId).get();
        Reaction reaction = new Reaction();
        reaction.setArticle(article);
        reaction.setUser(user);
        reaction.setIsLike(false);
        reactionRepository.save(reaction);
        return "Disliked";
    }
}
