package org.example.controller;

import org.example.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.example.repository.UserRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String pseudo
            , @RequestParam String password, @RequestParam String role) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        if (userRepository.findByPseudo(pseudo) != null) {
            return "Pseudo already exists";
        }
        User n = new User();
        n.setPseudo(pseudo);
        n.setPassword(password);
        n.setRole(role);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @DeleteMapping(path="/delete")
    public @ResponseBody String deleteUser(@RequestParam Integer id) {
        if (!userRepository.existsById(id)) {
            return "User not found";
        }
        userRepository.deleteById(id);
        return "Deleted";
    }

    @PutMapping(path="/update")
    public @ResponseBody String updateUser(@RequestParam Integer id, @RequestParam(required = false) String pseudo, @RequestParam(required = false) String password, @RequestParam(required = false) String role) {
        if (!userRepository.existsById(id)) {
            return "User not found";
        }
        User n = userRepository.findById(id).get();

        n.setPseudo(pseudo != null ? pseudo : n.getPseudo());
        n.setPassword(password != null ? password : n.getPassword());
        n.setRole(role != null ? role : n.getRole());
        userRepository.save(n);
        return "Updated";
    }

    @GetMapping(path="/find")
    public @ResponseBody User findUser(@RequestParam Integer id) {
        return userRepository.findById(id).get();
    }

}
